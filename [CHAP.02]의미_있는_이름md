## [CHAP.02] 의미 있는 이름
- 이름을 잘 짓는 간단한 규칙들

### 의도를 분명히 밝혀라
- `변수, 함수, 클래스 이름`에 대한 질문(3)
  - 변수(함수, 클래스)의 존재 이유
  - 수행 기능?
  - 사용 방법?
- 위 질문에 **주석**이 필요하다면
  - 의도를 분명히 드러내지 못한 것
- **코드 맥락**이 **코드 자체**에 명시적으로 드러나야 함
- 어떤 변수 `FLAGGED`를
  - 함수인 `isFlagged()`로 표현도 가능

### 그릇된 정보를 피하라
- 코드에 그릇된 단서를 남기면 안됨
- `널리 쓰이는 의미가 있는 단어`를, 다른 의미로 사용해선 안됨
- e.g. 어떤 계정을 그룹으로 묶는 상황
  - 실제 `List`가 아니라면, `accountList`로 명명 x
  - `accountGroup, bunchOfAccounts, Accounts`등으로 명시 필요
- 서로 흡사한 이름 사용하지 말기
  - 한 모듈, `XYZControllerForEfficientHandlingOfStrings`
  - 조금 떨어진 모듈, `XYZControllerForEfficientStorageOfStrings`
  - 차이점이 명확이 드러나지 않음
- **유사한 개념 = 유사한 표기법**
  - 일관성이 떨어지는 표기법은 그릇된 정보
- 최신 자바 환경에서는 **자동 완성 기능**을 제공
  - 이를 활용하기
  - 후보 목록에서 유사한 개념이 알파벳 순으로 나온다면
  - 각 개념차이가 명백히 드러난다면 **코드 자동 완성 기능**은 유용함
- 대부분의 개발자는
  - 객체에 달린 `상세한 주석`이나 `클래스`가 제공하는 메서드 목록을 살펴보지 않은채
  - 이름만 보고 객체를 선택
- `l, 1, O, 0`의 차이 조심하기
- 코드 글꼴을 잘 사용하기

### 의미 있게 구분하라
- `컴파일러`나 `인터프리터`만 통과하려면 생각으로 코드를 구현 X
- **연속된 숫자**를 덧붙이거나 **불용어**(noise word)를 추가하는 방식은 적절하지 못함
  - 이름이 달라야한다면 의미도 달라야함
- **불용어**를 추가해도 아무런 정보를 제공하지 못함
  - `Product`라는 클래스
  - `ProductInfo, ProductData`로 부르지 말 것
  - `Info, Data`는 `a, an, the`와 마찬가지로 의미가 불분명한 용어임
- `a, the` 접두어를 사용하지 말라는 소리가 X
  - 의미가 분명히 다르다면 사용해도 무방
  - e.g. 모든 지역 변수는 `a`를 사용하고
  - 모든 함수 인수는 `the`를 사용
- 요지는 `zork`라는 변수가 있을때, `theZork`라는 이름을 지으면 X
- **불용어**는 **중복**
  - 변수 이름에 `variable`이라는 단어 X
  - 표 이름에 `table` X
  - `NameString`이라는 이름 X
  - `Customer` 클래스, `CustomerObject` X
- 오류 예시
  ```java
  // 프로젝트에 참여한 프로그래머, 어떤 함수를 호출할지 모호한 상황
  getActiveAccount();
  getActiveAccounts();
  getActiveAccountInfo();
  ```
- 명확한 관례가 없다면, `money`와 `moneyAmount`는 구분 x
- 아래 역시 구분이 어려움
  - `customerInfo, customer`
  - `accountData, account`
  - `theMessage, message`
- **읽는 사람이 차이를 알도록 이름을 지을 것**